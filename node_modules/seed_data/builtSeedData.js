var _ = require('lodash'),
    ObjectID = require('mongodb').ObjectID,
    ReferenceTo = require('seed_data/ReferenceTo.js'),
    NewMongoIdPlaceholder = require('seed_data/NewMongoIdPlaceholder.js'),
    glob = require('glob'),
    idsToBakeIn = require('seed_data/idsToBakeIn'),
    rawSeedData = (function () {
        var result = {},
            objectFiles = glob.sync(__dirname + '/objects/**/[^_]*.js');

        _.each(objectFiles, function (filename) {
            _.extend(result, require(filename));
        });

        return result;
    }()),
    nextIdPostfix = 10000,
    seedDataWithIds = _.mapValues(rawSeedData, function (rawObject, specId) {
        var object = _.clone(rawObject);
        if (!object.data._id) {
            if (specId in idsToBakeIn) {
                object.data._id = ObjectID(idsToBakeIn[specId]);
            }
            else {
                object.data._id = ObjectID("1000000000000000000" + nextIdPostfix++);
            }
        }

        replaceNewMongoIdPlaceholders(object);

        return object;

        function replaceNewMongoIdPlaceholders (object) {
            _.each(object, function (value, key) {
                // We use this to indicate that an embedded object needs an id
                if (object._id instanceof NewMongoIdPlaceholder) {
                    if (object._id.name) {
                        var name = object._id.name;
                        if (name in idsToBakeIn) {
                            object._id = ObjectID(
                                idsToBakeIn[name]
                            );
                        }
                        else {
                            throw new Error("Name " + name + " doesn't exist in idsToBakeIn.js");
                        }
                    }
                    else {
                        object._id = ObjectID("1000000000000000000" + nextIdPostfix++);
                    }
                }
                else if (value instanceof Array || value instanceof Object) {
                    replaceNewMongoIdPlaceholders(value);
                }
            });
        }
    });

var result = _.clone(seedDataWithIds);
function replaceReferences (object) {
    _.each(object, function (value, key) {
        if (value instanceof ReferenceTo) {
            if (!(value.referencedObjectName in seedDataWithIds)) {
                throw new Error("Seed data contains a reference to non-existent object " + value.referencedObjectName);
            }
            object[key] = seedDataWithIds[value.referencedObjectName].data._id;
        }
        else if (value instanceof Array || value instanceof Object) {
            replaceReferences(value);
        }
    });
}
replaceReferences(result);

module.exports = result;